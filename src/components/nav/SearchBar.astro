---
// Removed: import { allMovies } from "../../content.config";
import { Image } from "astro:assets";
import searchIcon from "../../../public/icons/search.svg";
---
<!-- Search Bar -->
<div class="flex items-center flex-grow md:flex-none md:ml-4 px-4 md:px-0">
  <div class="relative w-full md:w-auto">
    <input
      type="text"
      id="searchInput"
      placeholder="Search..."
      aria-label="Search for horror movies"
      class="text-black rounded-md py-2 pl-4 pr-10 w-full md:w-auto outline-none ring-2 ring-black focus:ring-[#d60c16]"
    />
    <button
      id="searchButton"
      class="absolute right-3 top-1/2 transform -translate-y-1/2 hover:text-white"
    >
      <Image src={searchIcon} alt="🔍" width={25} height={25} loading="eager" />
    </button>

    <!-- Autocomplete Dropdown -->
    <ul
      id="autocompleteList"
      class="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-md shadow-lg hidden max-h-60 overflow-y-auto"
    ></ul>
  </div>
</div>

<!-- Client-side Autocomplete Script -->
<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const input = document.getElementById("searchInput");
    const list = document.getElementById("autocompleteList");

    if (!input || !list) {
      console.warn("Search input or autocomplete list not found.");
      return;
    }

    let allMovies = [];

    try {
      const response = await fetch("/api/movies.json");
      if (!response.ok) throw new Error("Failed to fetch movie data");
      const data = await response.json();

      // Only include required fields
      allMovies = data.map(movie => ({
        name: movie.data.name,
        posterUrl: movie.posterUrl,
        releaseYear: movie.releaseYear,
        slug: movie.slug
      }));
    } catch (err) {
      console.error("Error loading movie data:", err);
    }

    input.addEventListener("input", () => {
      const query = input.value.toLowerCase();
      list.innerHTML = "";

      if (!query) {
        list.classList.add("hidden");
        return;
      }

      const filtered = allMovies
        .filter(movie => movie?.name?.toLowerCase().includes(query))
        .slice(0, 5);

      if (filtered.length === 0) {
        list.classList.add("hidden");
        return;
      }

      filtered.forEach(movie => {
        const li = document.createElement("li");
        li.className = "flex items-center gap-3 px-4 py-2 hover:bg-gray-100 cursor-pointer";

        const img = document.createElement("img");
        img.src = movie.posterUrl;
        img.alt = movie.name;
        img.className = "w-10 h-14 object-cover rounded-sm flex-shrink-0";

        const year = movie.releaseYear ? ` (${movie.releaseYear})` : "";
        const text = document.createElement("span");
        text.textContent = movie.name + year;
        text.className = "text-sm text-black";

        li.appendChild(img);
        li.appendChild(text);

        li.addEventListener("mousedown", () => {
          window.location.href = "/movie/" + movie.slug;
        });

        list.appendChild(li);
      });

      list.classList.remove("hidden");
    });

    document.addEventListener("click", (e) => {
      if (
        !e.target.closest("#searchInput") &&
        !e.target.closest("#autocompleteList")
      ) {
        list.classList.add("hidden");
      }
    });
  });
</script>