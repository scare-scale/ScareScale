---
import { calculateOverallRating ***REMOVED*** from "../../utils/scoreUtils";
import MovieCard from "../cards/MovieCard.astro";
import type { MovieData ***REMOVED*** from "../../models/Movie";

export enum Sort {
  Random,
  HighestToLowestScore
***REMOVED***

const { entries, showAll = false, maxCount = 10, showRank = false, sort = Sort.Random, lazyLoad = false, hidden = false ***REMOVED*** = Astro.props;

type Movie = { data: typeof MovieData; slug: String; scareScaleRating: number ***REMOVED***;

const movies: Movie[] = entries.map(
  (entry: { slug: any; data: typeof MovieData ***REMOVED***): Movie => ({
    data: entry.data,
    slug: entry.slug,
    scareScaleRating: calculateOverallRating(entry.data.categoryRatings),
  ***REMOVED***)
);

const filterMovie = (movie: Movie) => {
  if (showAll) {
    return true;
  ***REMOVED***

  if (movie.scareScaleRating > 0) {
    return true;
  ***REMOVED***

  return false;
***REMOVED***;

const getSortMethod = () => {
    if (sort == Sort.HighestToLowestScore) {
        return (a: Movie, b: Movie) => b.scareScaleRating - a.scareScaleRating;;
    ***REMOVED***

    // Sort randomly
    return () => Math.random() - 0.5;
***REMOVED***

const sortMethod = getSortMethod()

const optionalClasses = `${hidden ? " hidden " : ""***REMOVED***`
---

<div
  id="moviesContainer"
  class={"mt-4 grid grid-cols-4 gap-x-4 gap-y-4 lg:grid-cols-6" + optionalClasses***REMOVED***
>
  {
    movies
      .filter(filterMovie)
      .sort(sortMethod)
      .slice(0, maxCount)
      .map((movie, index) => {
        return (
          <MovieCard
            {...movie.data***REMOVED***
            slug={movie.slug***REMOVED***
            scareScaleRating={movie.scareScaleRating***REMOVED***
            rank={showRank ? index + 1 : undefined***REMOVED***
            lazyLoad={lazyLoad***REMOVED***
          />
        );
      ***REMOVED***)
  ***REMOVED***
</div>
