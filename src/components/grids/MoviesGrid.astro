---
import { allMovies } from "../../content.config";
import type { Movie } from "../../models/Movie";
import { isSimilarMovie } from "../../utils/comparisonUtils";
import MovieCard from "../cards/MovieCard.astro";

export enum Sort {
  Random,
  HighestToLowestScore,
  ReleaseDateDecending,
  ReleaseDateAscending,
  Gore,
  Creepy,
  Jumpscares,
  Suspense,
  Psychological
}

const { showAll = false, maxCount = 1000000, showRank = false, sort = Sort.Random, lazyLoad = false, hidden = false, yearFilter = undefined, scoreFilter = 0, similar = undefined, movies = allMovies.getAll()} = Astro.props;

const filterMovie = (movie: Movie) => {
  if (showAll) {
    return true;
  }

  // Filter out movies without ratings
  if (movie.officialScore == 0) {
    return false;
  }

  if (yearFilter) {
    if (!yearFilter.includes(String(movie.releaseYear))) {
        return false;
    }
  }

  if (scoreFilter > 0) {
    if (movie.officialScore < scoreFilter) {
      return false;
    }
  }

  if (similar) {
    if (!isSimilarMovie(movie, similar)) {
      return false;
    }
  }

  return true;
};

const getSortMethod = () => {
    if (sort == Sort.HighestToLowestScore) {
        return (a, b) => b.scareScaleRating - a.scareScaleRating;
    }

    if (sort == Sort.ReleaseDateDecending) {
        return (a, b) => b.parsedDate.getTime() - a.parsedDate.getTime();
    }

    if (sort == Sort.ReleaseDateAscending) {
        return (a, b) => a.parsedDate.getTime() - b.parsedDate.getTime();
    }
    
    if (sort == Sort.Gore) {
        return (a, b) => b.data.categoryRatings.gore - a.data.categoryRatings.gore;
    }
    
    if (sort == Sort.Creepy) {
        return (a, b) => b.data.categoryRatings.creepy - a.data.categoryRatings.creepy;
    }
    
    if (sort == Sort.Jumpscares) {
        return (a, b) => b.data.categoryRatings.jumpscares - a.data.categoryRatings.jumpscares;
    }
    
    if (sort == Sort.Suspense) {
        return (a, b) => b.data.categoryRatings.suspense - a.data.categoryRatings.suspense;
    }
    
    if (sort == Sort.Psychological) {
        return (a, b) => b.data.categoryRatings.psychological - a.data.categoryRatings.psychological;
    }

    // Sort randomly
    return () => Math.random() - 0.5;
}

const sortMethod = getSortMethod()

const optionalClasses = `${hidden ? " hidden " : ""}`
---

<div
  id="moviesContainer"
  class={"m-4 mb-8 grid grid-cols-3 gap-x-4 gap-y-4 lg:grid-cols-5" + optionalClasses}
>
  {
    movies
      .filter(filterMovie)
      .sort(sortMethod)
      .slice(0, maxCount)
      .map((movie: Movie, index: number) => {
        return (
          <MovieCard
            movie={movie}
            rank={showRank ? index + 1 : undefined}
            lazyLoad={lazyLoad}
          />
        );
      })
  }
</div>
