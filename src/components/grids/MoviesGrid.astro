---
import { calculateOverallRating } from "../../utils/scoreUtils";
import MovieCard from "../cards/MovieCard.astro";
import type { MovieData } from "../../models/Movie";

export enum Sort {
  Random,
  HighestToLowestScore,
  ReleaseDateDecending
}

const { entries, showAll = false, maxCount = 1000000, showRank = false, sort = Sort.Random, lazyLoad = false, hidden = false, yearFilter = undefined } = Astro.props;

type Movie = { data: typeof MovieData; slug: String; scareScaleRating: number; releaseDateParsed: Date };

const movies: Movie[] = entries.map(
  (entry: { slug: any; data: typeof MovieData }): Movie => ({
    data: entry.data,
    slug: entry.slug,
    scareScaleRating: calculateOverallRating(entry.data.categoryRatings),
    releaseDateParsed: new Date(String(entry.data.releaseDate))
  })
);

const filterMovie = (movie: Movie) => {
  if (showAll) {
    return true;
  }

  // Filter out movies without ratings
  if (movie.scareScaleRating == 0) {
    return false;
  }

  if (yearFilter) {
    const movieYear = movie.releaseDateParsed.getFullYear();
    if (!yearFilter.includes(String(movieYear))) {
        return false;
    }
  }

  return true;
};

const getSortMethod = () => {
    if (sort == Sort.HighestToLowestScore) {
        return (a: Movie, b: Movie) => b.scareScaleRating - a.scareScaleRating;;
    }

    if (sort == Sort.ReleaseDateDecending) {
        return (a: Movie, b: Movie) => b.releaseDateParsed.getTime() - a.releaseDateParsed.getTime();
    }

    // Sort randomly
    return () => Math.random() - 0.5;
}

const sortMethod = getSortMethod()

const optionalClasses = `${hidden ? " hidden " : ""}`
---

<div
  id="moviesContainer"
  class={"m-4 mb-8 grid grid-cols-3 gap-x-4 gap-y-4 lg:grid-cols-5" + optionalClasses}
>
  {
    movies
      .filter(filterMovie)
      .sort(sortMethod)
      .slice(0, maxCount)
      .map((movie, index) => {
        return (
          <MovieCard
            {...movie.data}
            slug={movie.slug}
            scareScaleRating={movie.scareScaleRating}
            rank={showRank ? index + 1 : undefined}
            lazyLoad={lazyLoad}
          />
        );
      })
  }
</div>
