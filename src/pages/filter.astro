---
import MainLayout from "../layouts/MainLayout.astro";
import MoviesGrid, { Sort } from "../components/grids/MoviesGrid.astro";
import { getCollection } from "astro:content";
import Sidebar from "../components/Sidebar.astro";

const movieEntries = await getCollection("movie");

const categories = [
  { id: "gore", name: "Gore", icon: "/icons/categories/gore.svg" },
  { id: "creepy", name: "Creepy", icon: "/icons/categories/creepy.svg" },
  { id: "jumpscares", name: "Jumpscares", icon: "/icons/categories/jumpscares.svg" },
  { id: "suspense", name: "Suspense", icon: "/icons/categories/suspense.svg" },
  { id: "psychological", name: "Psychological", icon: "/icons/categories/psychological.svg" },
];
---

<MainLayout>
  <section class="flex flex-col md:flex-row gap-y-10 md:gap-x-10 min-h-screen" id="searchResults">
    <!-- Filters Button -->
    <div id="toggleSidebar" class="w-full bg-gray-800 text-white p-4 md:hidden cursor-pointer flex items-center gap-2">
      <span>Filters</span>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M5.293 9.293a1 1 0 011.414 0L10 12.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </div>

    <!-- Sidebar -->
    <Sidebar
      categories={categories}
      onSliderInput={(id, value) => {
        const sliderValueDisplay = document.getElementById(`${id}Value`);
        if (sliderValueDisplay) sliderValueDisplay.textContent = value.toString();
        applyFilters();
        updateActiveFilters();
      }}
    />

    <!-- Main Content -->
    <div class="flex-1">
      <div class="mx-auto max-w-2xl lg:max-w-7xl">
        <!-- Active Filters -->
        <div id="activeFilters" class="flex flex-wrap gap-2 m-4">
          <!-- Active filters will be dynamically added here -->
        </div>
        <div id="loadingIndicator" class="text-center text-xl text-white">
          Loading...
        </div>
        <MoviesGrid
          entries={movieEntries}
          lazyLoad={true}
          hidden={false}
          sort={Sort.HighestToLowestScore}
          showAll={true}
        />
        <p id="noResultsMessage" class="text-center text-xl text-white hidden">
          No Results
        </p>
      </div>
    </div>
  </section>
</MainLayout>

<script>
  const categories = [
    { id: "gore", name: "Gore" },
    { id: "creepy", name: "Creepy" },
    { id: "jumpscares", name: "Jumpscares" },
    { id: "suspense", name: "Suspense" },
    { id: "psychological", name: "Psychological" },
  ];

  const sliders = document.querySelectorAll<HTMLInputElement>(".filter-slider");
  const moviesContainer = document.getElementById("moviesContainer");
  const loadingIndicator = document.getElementById("loadingIndicator");
  const noResultsMessage = document.getElementById("noResultsMessage");
  const activeFiltersContainer = document.getElementById("activeFilters");
  const params = new URLSearchParams(window.location.search);
  const q = params.get("q")?.toLowerCase() || "";

  const sidebar = document.getElementById("sidebar");
  const toggleSidebarButton = document.getElementById("toggleSidebar");
  const closeSidebarButton = document.getElementById("closeSidebar");

  if (toggleSidebarButton && sidebar) {
    toggleSidebarButton.addEventListener("click", () => {
      sidebar.classList.remove("-translate-x-full");
    });
  }

  if (closeSidebarButton && sidebar) {
    closeSidebarButton.addEventListener("click", () => {
      sidebar.classList.add("-translate-x-full");
    });
  }

  // Close sidebar when clicking outside
  document.addEventListener("click", (event) => {
    if (
      sidebar &&
      !sidebar.classList.contains("-translate-x-full") &&
      !sidebar.contains(event.target) &&
      !toggleSidebarButton.contains(event.target)
    ) {
      sidebar.classList.add("-translate-x-full");
    }
  });

  // Ensure elements are not null before accessing properties
  if (loadingIndicator) loadingIndicator.style.display = "none";
  if (moviesContainer) moviesContainer.style.display = "grid";

  // Update slider values dynamically
  sliders.forEach((slider) => {
    const valueDisplay = document.getElementById(`${slider.id.replace("Slider", "Value")}`);
    if (valueDisplay) {
      slider.addEventListener("input", () => {
        valueDisplay.textContent = slider.value;
        applyFilters();
        updateActiveFilters();
      });
    }
  });

  // Update active filters display
  function updateActiveFilters() {
    if (!activeFiltersContainer) return;
    activeFiltersContainer.innerHTML = "";

    // Add search query if present
    if (q) {
      const searchFilter = document.createElement("div");
      searchFilter.className = "bg-gray-700 text-white px-3 py-1 rounded flex items-center gap-2";
      searchFilter.textContent = `Search: ${q}`;
      const deleteButton = document.createElement("button");
      deleteButton.className = "text-red-500";
      deleteButton.textContent = "✕";
      deleteButton.addEventListener("click", () => {
        params.delete("q");
        window.location.search = params.toString();
      });
      searchFilter.appendChild(deleteButton);
      activeFiltersContainer.appendChild(searchFilter);
    }

    // Add active slider filters
    sliders.forEach((slider) => {
      const value = parseInt(slider.value, 10);
      if (value > 0) {
        const filter = document.createElement("div");
        filter.className = "bg-gray-700 text-white px-3 py-1 rounded flex items-center gap-2";
        filter.textContent = `${slider.id.replace("Slider", "")}: ${value}`;
        const deleteButton = document.createElement("button");
        deleteButton.className = "text-red-500";
        deleteButton.textContent = "✕";
        deleteButton.addEventListener("click", () => {
          slider.value = "0";
          const valueDisplay = document.getElementById(`${slider.id.replace("Slider", "Value")}`);
          if (valueDisplay) valueDisplay.textContent = "0";
          applyFilters(); // Reapply filters without clearing others
          updateActiveFilters(); // Refresh the active filters display
        });
        filter.appendChild(deleteButton);
        activeFiltersContainer.appendChild(filter);
      }
    });
  }

  // Filter logic
  function applyFilters() {
    if (!moviesContainer) return;

    const sliderValues = {};
    categories.forEach((category) => {
      sliderValues[category.id] = parseInt(document.getElementById(`${category.id}Slider`)?.value || "0", 10);
    });

    const allMovies = moviesContainer.querySelectorAll<HTMLElement>(":scope > *");
    let hasResults = false;

    allMovies.forEach((movie) => {
      const title = movie.getAttribute("id")?.toLowerCase() || "";
      const categories = movie.getAttribute("data-categories")?.split(",") || [];
      const matchesSearch = !q || title.includes(q);
      const matchesFilters = Object.entries(sliderValues).every(([key, value]) => {
        const categoryScore = categories.find((cat) => cat.startsWith(`${key}:`));
        return categoryScore ? parseInt(categoryScore.split(":")[1], 10) >= value : true;
      });

      if (matchesSearch && matchesFilters) {
        movie.style.display = "block";
        hasResults = true;
      } else {
        movie.style.display = "none";
      }
    });

    // Toggle the "No Results" message
    if (noResultsMessage) {
      if (hasResults) {
        noResultsMessage.classList.add("hidden");
      } else {
        noResultsMessage.classList.remove("hidden");
      }
    }
  }

  // Apply filters and update active filters on page load
  applyFilters();
  updateActiveFilters();
</script>
