---
import MainLayout from "../layouts/MainLayout.astro";
import MoviesGrid from "../components/grids/MoviesGrid.astro";
import { getCollection } from "astro:content";

const movieEntries = await getCollection("movie");
---

<MainLayout>
  <section class="flex flex-col md:flex-row gap-y-10 md:gap-x-10 min-h-screen pt-10" id="searchResults">
    <!-- Sidebar -->
    <aside class="w-full md:w-1/4 bg-gray-800 p-4 rounded-lg text-white">
      <h3 class="text-2xl font-semibold mb-4">Filters</h3>
      <div class="flex flex-col gap-6">
        <div>
          <label for="goreSlider" class="block">Gore</label>
          <input type="range" id="goreSlider" class="filter-slider" min="0" max="10" value="0" />
          <span id="goreValue" class="ml-2">0</span>
        </div>
        <div>
          <label for="creepySlider" class="block">Creepy</label>
          <input type="range" id="creepySlider" class="filter-slider" min="0" max="10" value="0" />
          <span id="creepyValue" class="ml-2">0</span>
        </div>
        <div>
          <label for="jumpscaresSlider" class="block">Jumpscares</label>
          <input type="range" id="jumpscaresSlider" class="filter-slider" min="0" max="10" value="0" />
          <span id="jumpscaresValue" class="ml-2">0</span>
        </div>
        <div>
          <label for="suspenseSlider" class="block">Suspense</label>
          <input type="range" id="suspenseSlider" class="filter-slider" min="0" max="10" value="0" />
          <span id="suspenseValue" class="ml-2">0</span>
        </div>
        <div>
          <label for="psychologicalSlider" class="block">Psychological</label>
          <input type="range" id="psychologicalSlider" class="filter-slider" min="0" max="10" value="0" />
          <span id="psychologicalValue" class="ml-2">0</span>
        </div>
      </div>
    </aside>

    <!-- Main Content -->
    <div class="flex-1">
      <div class="mx-auto max-w-2xl px-6 lg:max-w-7xl lg:px-8">
        <p
          id="searchTermDisplay"
          class="mx-auto m-4 max-w-lg text-center text-4xl font-semibold text-balance text-white sm:text-5xl"
        >
          Search Results
        </p>
        <div id="loadingIndicator" class="text-center text-xl text-white">
          Loading...
        </div>
        <MoviesGrid
          entries={movieEntries}
          lazyLoad={true}
          hidden={false}
        />
        <p id="noResultsMessage" class="text-center text-xl text-white hidden">
          No Results
        </p>
      </div>
    </div>
  </section>
</MainLayout>

<script>
  const sliders = document.querySelectorAll(".filter-slider");
  const moviesContainer = document.getElementById("moviesContainer");
  const loadingIndicator = document.getElementById("loadingIndicator");
  const noResultsMessage = document.getElementById("noResultsMessage");
  const params = new URLSearchParams(window.location.search);
  const q = params.get("q")?.toLowerCase();

  // Hide the loading indicator and show the movies container
  loadingIndicator.style.display = "none";
  moviesContainer.style.display = "grid";

  // Update slider values dynamically
  sliders.forEach((slider) => {
    const valueDisplay = document.getElementById(`${slider.id.replace("Slider", "Value")}`);
    slider.addEventListener("input", () => {
      valueDisplay.textContent = slider.value;
      applyFilters();
    });
  });

  // Filter logic
  function applyFilters() {
    const sliderValues = {
      gore: parseInt(document.getElementById("goreSlider").value, 10),
      creepy: parseInt(document.getElementById("creepySlider").value, 10),
      jumpscares: parseInt(document.getElementById("jumpscaresSlider").value, 10),
      suspense: parseInt(document.getElementById("suspenseSlider").value, 10),
      psychological: parseInt(document.getElementById("psychologicalSlider").value, 10),
    };

    const allMovies = document.querySelectorAll<HTMLElement>("#moviesContainer > *");
    let hasResults = false;

    allMovies.forEach((movie) => {
      const title = movie.getAttribute("id")?.toLowerCase();
      const categories = movie.getAttribute("data-categories")?.split(",") || [];
      const matchesSearch = !q || (title && title.includes(q));
      const matchesFilters = Object.entries(sliderValues).every(([key, value]) => {
        const categoryScore = categories.find((cat) => cat.startsWith(`${key}:`));
        return categoryScore ? parseInt(categoryScore.split(":")[1], 10) >= value : true;
      });

      if (matchesSearch && matchesFilters) {
        movie.style.display = "block";
        hasResults = true;
      } else {
        movie.style.display = "none";
      }
    });

    // Toggle the "No Results" message
    if (hasResults) {
      noResultsMessage.classList.add("hidden");
    } else {
      noResultsMessage.classList.remove("hidden");
    }
  }

  // Apply filters on page load
  applyFilters();
</script>
