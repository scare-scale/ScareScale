---
import MainLayout from "../layouts/MainLayout.astro";
import MoviesGrid from "../components/grids/MoviesGrid.astro";
import { getCollection } from "astro:content";

const movieEntries = await getCollection("movie");
---

<MainLayout>
  <section class="flex flex-col md:flex-row gap-y-10 md:gap-x-10 min-h-screen pt-10" id="searchResults">
    <!-- Sidebar -->
    <aside class="w-full md:w-1/4 bg-gray-800 p-6 rounded-lg text-white shadow-lg">
      <h3 class="text-2xl font-semibold mb-6 border-b border-gray-600 pb-2">Filters</h3>
      <div class="flex flex-col gap-8">
        <div class="group">
          <label for="goreSlider" class="block font-medium mb-1">Gore</label>
          <div class="flex items-center gap-2">
            <span class="text-sm text-gray-400">0</span>
            <input type="range" id="goreSlider" class="filter-slider w-full cursor-pointer group-hover:bg-gray-700" min="0" max="10" value="0" />
            <span class="text-sm text-gray-400">10</span>
          </div>
          <div class="text-center text-sm text-gray-300 mt-1" id="goreValue">0</div>
        </div>
        <div class="group">
          <label for="creepySlider" class="block font-medium mb-1">Creepy</label>
          <div class="flex items-center gap-2">
            <span class="text-sm text-gray-400">0</span>
            <input type="range" id="creepySlider" class="filter-slider w-full cursor-pointer group-hover:bg-gray-700" min="0" max="10" value="0" />
            <span class="text-sm text-gray-400">10</span>
          </div>
          <div class="text-center text-sm text-gray-300 mt-1" id="creepyValue">0</div>
        </div>
        <div class="group">
          <label for="jumpscaresSlider" class="block font-medium mb-1">Jumpscares</label>
          <div class="flex items-center gap-2">
            <span class="text-sm text-gray-400">0</span>
            <input type="range" id="jumpscaresSlider" class="filter-slider w-full cursor-pointer group-hover:bg-gray-700" min="0" max="10" value="0" />
            <span class="text-sm text-gray-400">10</span>
          </div>
          <div class="text-center text-sm text-gray-300 mt-1" id="jumpscaresValue">0</div>
        </div>
        <div class="group">
          <label for="suspenseSlider" class="block font-medium mb-1">Suspense</label>
          <div class="flex items-center gap-2">
            <span class="text-sm text-gray-400">0</span>
            <input type="range" id="suspenseSlider" class="filter-slider w-full cursor-pointer group-hover:bg-gray-700" min="0" max="10" value="0" />
            <span class="text-sm text-gray-400">10</span>
          </div>
          <div class="text-center text-sm text-gray-300 mt-1" id="suspenseValue">0</div>
        </div>
        <div class="group">
          <label for="psychologicalSlider" class="block font-medium mb-1">Psychological</label>
          <div class="flex items-center gap-2">
            <span class="text-sm text-gray-400">0</span>
            <input type="range" id="psychologicalSlider" class="filter-slider w-full cursor-pointer group-hover:bg-gray-700" min="0" max="10" value="0" />
            <span class="text-sm text-gray-400">10</span>
          </div>
          <div class="text-center text-sm text-gray-300 mt-1" id="psychologicalValue">0</div>
        </div>
      </div>
    </aside>

    <!-- Main Content -->
    <div class="flex-1">
      <div class="mx-auto max-w-2xl px-6 lg:max-w-7xl lg:px-8">
        <!-- Active Filters -->
        <div id="activeFilters" class="flex flex-wrap gap-2 mb-4">
          <!-- Active filters will be dynamically added here -->
        </div>
        <div id="loadingIndicator" class="text-center text-xl text-white">
          Loading...
        </div>
        <MoviesGrid
          entries={movieEntries}
          lazyLoad={true}
          hidden={false}
        />
        <p id="noResultsMessage" class="text-center text-xl text-white hidden">
          No Results
        </p>
      </div>
    </div>
  </section>
</MainLayout>

<script>
  const sliders = document.querySelectorAll<HTMLInputElement>(".filter-slider");
  const moviesContainer = document.getElementById("moviesContainer");
  const loadingIndicator = document.getElementById("loadingIndicator");
  const noResultsMessage = document.getElementById("noResultsMessage");
  const activeFiltersContainer = document.getElementById("activeFilters");
  const params = new URLSearchParams(window.location.search);
  const q = params.get("q")?.toLowerCase() || "";

  // Ensure elements are not null before accessing properties
  if (loadingIndicator) loadingIndicator.style.display = "none";
  if (moviesContainer) moviesContainer.style.display = "grid";

  // Update slider values dynamically
  sliders.forEach((slider) => {
    const valueDisplay = document.getElementById(`${slider.id.replace("Slider", "Value")}`);
    if (valueDisplay) {
      slider.addEventListener("input", () => {
        valueDisplay.textContent = slider.value;
        applyFilters();
        updateActiveFilters();
      });
    }
  });

  // Update active filters display
  function updateActiveFilters() {
    if (!activeFiltersContainer) return;
    activeFiltersContainer.innerHTML = "";

    // Add search query if present
    if (q) {
      const searchFilter = document.createElement("div");
      searchFilter.className = "bg-gray-700 text-white px-3 py-1 rounded flex items-center gap-2";
      searchFilter.textContent = `Search: ${q}`;
      const deleteButton = document.createElement("button");
      deleteButton.className = "text-red-500";
      deleteButton.textContent = "✕";
      deleteButton.addEventListener("click", () => {
        params.delete("q");
        window.location.search = params.toString();
      });
      searchFilter.appendChild(deleteButton);
      activeFiltersContainer.appendChild(searchFilter);
    }

    // Add active slider filters
    sliders.forEach((slider) => {
      const value = parseInt(slider.value, 10);
      if (value > 0) {
        const filter = document.createElement("div");
        filter.className = "bg-gray-700 text-white px-3 py-1 rounded flex items-center gap-2";
        filter.textContent = `${slider.id.replace("Slider", "")}: ${value}`;
        const deleteButton = document.createElement("button");
        deleteButton.className = "text-red-500";
        deleteButton.textContent = "✕";
        deleteButton.addEventListener("click", () => {
          slider.value = "0";
          const valueDisplay = document.getElementById(`${slider.id.replace("Slider", "Value")}`);
          if (valueDisplay) valueDisplay.textContent = "0";
          applyFilters();
          updateActiveFilters();
        });
        filter.appendChild(deleteButton);
        activeFiltersContainer.appendChild(filter);
      }
    });
  }

  // Filter logic
  function applyFilters() {
    if (!moviesContainer) return;

    const sliderValues = {
      gore: parseInt(document.getElementById("goreSlider")?.value || "0", 10),
      creepy: parseInt(document.getElementById("creepySlider")?.value || "0", 10),
      jumpscares: parseInt(document.getElementById("jumpscaresSlider")?.value || "0", 10),
      suspense: parseInt(document.getElementById("suspenseSlider")?.value || "0", 10),
      psychological: parseInt(document.getElementById("psychologicalSlider")?.value || "0", 10),
    };

    const allMovies = moviesContainer.querySelectorAll<HTMLElement>(":scope > *");
    let hasResults = false;

    allMovies.forEach((movie) => {
      const title = movie.getAttribute("id")?.toLowerCase() || "";
      const categories = movie.getAttribute("data-categories")?.split(",") || [];
      const matchesSearch = !q || title.includes(q);
      const matchesFilters = Object.entries(sliderValues).every(([key, value]) => {
        const categoryScore = categories.find((cat) => cat.startsWith(`${key}:`));
        return categoryScore ? parseInt(categoryScore.split(":")[1], 10) >= value : true;
      });

      if (matchesSearch && matchesFilters) {
        movie.style.display = "block";
        hasResults = true;
      } else {
        movie.style.display = "none";
      }
    });

    // Toggle the "No Results" message
    if (noResultsMessage) {
      if (hasResults) {
        noResultsMessage.classList.add("hidden");
      } else {
        noResultsMessage.classList.remove("hidden");
      }
    }
  }

  // Apply filters and update active filters on page load
  applyFilters();
  updateActiveFilters();
</script>
