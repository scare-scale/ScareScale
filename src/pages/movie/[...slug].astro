---
import Prose from "../../components/Prose.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import { SEO } from "astro-seo";
import { Image } from "astro:assets";
import { movies } from "../../lib/movies";
import ScareScaleRating from "../../components/cards/ScareScaleRating.astro";
import Breadcrumbs from "../../components/nav/Breadcrumbs.astro";
import RatingsUnavailable from "../../components/cards/RatingsUnavailable.astro";
import MovieControlBar from "../../components/cards/MovieControlBar";
import MoviesGrid, { Sort } from "../../components/grids/MoviesGrid.astro";

export async function getStaticPaths() {
  return movies.getAll().map((movie) => ({
    params: { slug: movie.slug },
    props: { movie },
  }));
}

const { movie } = Astro.props;

const review = movie.getSummaryReview();
---

<head>
  <meta charset="UTF-8" />
  <SEO
    title={`${movie.name} (${movie.releaseYear}) Review & Scare Scale Rating`}
    description={`Is ${movie.name} scary? Our Scare Scale gives it a fear rating of ${Math.round(review.overallRating)}/10. Explore the full horror review and discover where it ranks among the scariest movies.`}
    canonical={`https://scarescale.com/movie/${movie.slug}`}
    noindex={review.overallRating == 0}
    openGraph={{
      basic: {
        type: "website",
        url: `https://scarescale.com/movie/${movie.slug}`,
        title: `${movie.name} Horror Review & Scare Scale Rating`,
        image: movie.posterUrl,
      },
      optional: {
        description: `${movie.name} scored ${review.overallRating}/10 on the Scare Scale. Find out what makes it terrifying or not and see how it compares to other horror films.`,
      },
    }}
  />
</head>

<MainLayout backdropUrl={movie.backdropUrl}>
  <section class="relative flex flex-col" id="movieDetails">
    <div class="relative flex flex-col gap-y-8 pt-6">
      <div class="px-6 lg:px-8">
        <Breadcrumbs movie={movie} />
      </div>

      <div class="max-w-7xl mx-auto px-6 lg:px-8">
        <div
          class="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-12 items-start min-h-[600px]"
        >
          <div class="flex justify-center lg:justify-start h-full">
            <div
              class="flex flex-col justify-between h-full max-w-xs lg:max-w-sm"
            >
              <div class="relative group">
                <Image
                  src={movie.posterUrl}
                  alt={`${movie.name} movie poster`}
                  width={300}
                  height={450}
                  class="w-full rounded-xl object-cover shadow-2xl group-hover:shadow-red-500/20 transition-shadow duration-300"
                />
              </div>
              <div class="mt-4">
                <MovieControlBar movie={movie} client:load/>
              </div>
            </div>
          </div>
          <!-- Movie Details -->
          <div class="lg:col-span-2 space-y-6">
            <div>
              <h1
                class="text-3xl font-bold tracking-tight text-white sm:text-4xl lg:text-5xl leading-tight mb-3"
              >
                {movie.name}
              </h1>
              <div class="flex items-center gap-2 text-gray-400 mb-6">
                <span class="text-lg">ðŸ“…</span>
                <span class="text-base font-medium"
                  >{movie.releaseDateText}</span
                >
              </div>
            </div>

            <div
              class="bg-gray-800/30 backdrop-blur-sm rounded-lg p-6 border border-gray-700/30"
            >
              <Prose>
                {
                  movie.synopsis && (
                    <p class="text-gray-200 leading-relaxed">
                      {movie.synopsis}
                    </p>
                  )
                }
              </Prose>
            </div>

            <div class="pt-2">
              {
                movie.hasReviews() ? (
                  <ScareScaleRating movie={movie} />
                ) : (
                  movie.isReleased && <RatingsUnavailable movie={movie} />
                )
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  {
    movie.hasHumanReviews() && (
      <div class="max-w-7xl mx-auto px-6 lg:px-8 pt-16 pb-8">
        <div class="text-center mb-10">
          <h2 class="text-3xl font-bold tracking-tight text-white sm:text-4xl mb-4">
            Reviews
          </h2>
          <div class="w-32 h-1 bg-gradient-to-r from-blood-600 to-blood-400 mx-auto rounded-full"></div>
        </div>

        <div class="bg-bg-card rounded-lg border border-border-primary">
          <table class="w-full text-left">
            <thead class="bg-bg-accent border-b border-border-primary">
              <tr>
                <th class="px-2 md:px-6 py-4 text-text-secondary font-semibold uppercase tracking-wide text-sm">Reviewer</th>
                <th class="px-2 md:px-6 py-4 text-text-secondary font-semibold uppercase tracking-wide text-sm">Rating</th>
                <th class="px-2 md:px-6 py-4 text-text-secondary font-semibold uppercase tracking-wide text-sm">Categories</th>
              </tr>
            </thead>
            <tbody class="">
              {movie.getHumanReviews().map((review) => (
                <>
                  <tr class="border-b border-border-primary">
                    <td class="px-2 md:px-6 py-4">
                      <div class="flex items-center gap-3">
                        <div>
                          <div class="text-text-primary font-medium">{review.type.charAt(0).toUpperCase() + review.type.slice(1)} Reviewer</div>
                          <div class="text-text-muted text-sm">Verified</div>
                        </div>
                      </div>
                    </td>
                    <td class="px-2 md:px-6 py-4">
                      <div class="text-2xl font-bold text-blood-500">{review.overallRating}/10</div>
                    </td>
                    <td class="px-2 md:px-6 py-4 md:table-cell">
                      <div class="flex flex-wrap gap-2">
                        {Object.entries(review.categories).map(([categoryName, score]) => (
                          <div class="flex items-center gap-1 bg-bg-accent px-2 py-1 rounded text-sm">
                            <img class="w-3 h-3" src={`/icons/categories/${categoryName}.svg`} alt={categoryName} />
                            <span class="text-text-secondary capitalize">{categoryName}</span>
                            <span class="text-blood-400 font-medium">{score}/10</span>
                          </div>
                        ))}
                      </div>
                    </td>
                  </tr>
                  {review.content?.trim() && (
                    <tr class="border-b-2 border-primary">
                      <td colspan="3" class="px-2 md:px-6 py-4">
                        <div class="text-text-primary text-sm leading-relaxed max-w-none">
                          {review.content}
                        </div>
                      </td>
                    </tr>
                  )}
                </>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    )
  }

  <!-- Add Review Button Below Reviews -->
  <div class="max-w-7xl mx-auto px-6 lg:px-8 pt-8 pb-8">
    <div class="text-center">
      <a
        href={`/movie/${movie.slug}/review`}
        class="inline-flex items-center gap-2  bg-gray-800/80 backdrop-blur-md shadow-xl text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 shadow-lg hover:shadow-xl"
      >
        <img src="/icons/edit.svg" alt="Add Review" class="w-5 h-5" />
        Add Your Review
      </a>
    </div>
  </div>

  <!-- Similar Movies Section -->
  <div class="max-w-7xl mx-auto px-6 lg:px-8 pt-16 pb-8">
    <div class="text-center mb-10">
      <h2 class="text-3xl font-bold tracking-tight text-white sm:text-4xl mb-4">
        More Movies Like This
      </h2>
      <div
        class="w-32 h-1 bg-gradient-to-r from-red-600 to-red-400 mx-auto rounded-full"
      >
      </div>
    </div>
    <MoviesGrid
      sort={Sort.HighestToLowestScore}
      similar={movie}
      maxCount={10}
    />
  </div>
</MainLayout>
